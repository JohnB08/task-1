body {
  text-align: center;
  background: hsla(0, 0%, 41%, 1);

  background: linear-gradient(
    90deg,
    hsla(0, 0%, 41%, 1) 0%,
    hsla(0, 0%, 100%, 1) 100%
  );

  background: -moz-linear-gradient(
    90deg,
    hsla(0, 0%, 41%, 1) 0%,
    hsla(0, 0%, 100%, 1) 100%
  );

  background: -webkit-linear-gradient(
    90deg,
    hsla(0, 0%, 41%, 1) 0%,
    hsla(0, 0%, 100%, 1) 100%
  );

  filter: progid: DXImageTransform.Microsoft.gradient( startColorstr="#696969", endColorstr="#FFFFFF", GradientType=1 );
  /* This gradient I will not take credit for, made through Coolors.co */
  font-family: "Roboto Slab", serif;
  /* Importing the google font */
  color: #f1f1f1;
  text-shadow: 0 0 2px #2e2e2e;
  border: 4px solid #2e2e2e;
  /* I think the outlined text just looks neat. */
  margin: 0;
  padding: 0;
}
/* common text and content styling */
h1,
h2,
h3,
.top-btn,
#frank-main,
.frank {
  /* This should hopefully apply the box shadow to everything that wants/needs it */
  box-shadow: 2px 2px 2px #2e2e2e;
}
h1,
h2,
.top-btn:hover {
  background-color: #696969;
}
h1 {
  padding: 5px 40px;
}
h2 {
  padding: 5px 30px;
}
h3 {
  background-color: rgb(233, 233, 233);
  padding: 5px 20px;
}

/* Display values for the different boxes. */
#Header,
ul,
#Main-Container,
#Right-Side,
#Footer {
  display: flex;
}
ul,
#Main-Container,
#Footer {
  justify-content: center;
}
ul,
#Main-Container {
  flex-wrap: wrap;
}
#Header,
#Right-Side {
  flex-direction: column;
  align-items: center;
}
/* This feels like cheating. I do not understand flexbox at all.
   Yet after playing through the flexbox-froggy game, I keep trying to use it all over.
    I try to keep in my head, it's just boxes and grids. */

/* Individual styling */
#Top-Menu {
  margin: 10px 20px 10px 0;
}
ul {
  gap: 25px;
  list-style: none;
  /* Lists really are a useful way to make buttons. Scrimba was correct. */
}
.top-btn {
  border-top: 1px solid whitesmoke;
  border-left: 1px solid #696969;
  border-right: 2px solid #696969;
  border-bottom: 2px solid #696969;
  background-color: inherit;
  font-family: inherit;
  color: inherit;
  text-shadow: inherit;
}
.top-btn:hover {
  border-color: #f1f1f1;
}
#Left-Side {
  margin: 0 auto;
  height: 100%;
  width: 33%;
}
/* ? Is there a better way to auto-scale images? can you use them as a background-image and autocrop them to a flexbox? 
My current solution was to determine how much width each box could occupy within the parent before they had to wrap. this seems to scale the images to fit i.e. on a phonescreen.
This feels sub-obtimal, but it's the only way I know how to do what I want. */
#frank-main {
  margin: 10px;
  width: 100%;
  border-radius: 6px;
  /* Almost screwed myself here, by using padding instead of margin, padding makes the box-shadow look weird. */
}
#Right-Side {
  padding: 20px;
}
.frank {
  margin: 10px;
  border-radius: 6px;
  width: 28%;
}
#Footer {
  border-top: 4px solid #2e2e2e;
}
